{"version":3,"file":"react-rating.umd.min.js","sources":["../src/utils/style.js","../src/RatingSymbol.js","../src/Rating.js","../src/utils/noop.js","../src/RatingAPILayer.js"],"sourcesContent":["var style = {\r\n  display: 'inline-block',\r\n  borderRadius: '50%',\r\n  border: '5px double white',\r\n  width: 30,\r\n  height: 30\r\n};\r\n\r\nexport default {\r\n  empty: {\r\n    ...style,\r\n    backgroundColor: '#ccc'\r\n  },\r\n  full: {\r\n    ...style,\r\n    backgroundColor: 'black'\r\n  },\r\n  placeholder: {\r\n    ...style,\r\n    backgroundColor: 'red'\r\n  }\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Return the corresponding React node for an icon.\r\nconst _iconNode = (icon) => {\r\n  // If it is already a React Element just return it.\r\n  if (React.isValidElement(icon)) {\r\n    return icon;\r\n  }\r\n  // If it is an object, try to use it as a CSS style object.\r\n  if (typeof icon === 'object' && icon !== null) {\r\n    return <span style={icon} />;\r\n  }\r\n  // If it is a string, use it as class names.\r\n  if (Object.prototype.toString.call(icon) === '[object String]') {\r\n    return <span className={icon} />;\r\n  }\r\n};\r\n\r\nclass RatingSymbol extends React.PureComponent {\r\n  render() {\r\n    const {\r\n      index,\r\n      inactiveIcon,\r\n      activeIcon,\r\n      percent,\r\n      direction,\r\n      readonly,\r\n      onClick,\r\n      onMouseMove,\r\n      onTouchEnd\r\n    } = this.props;\r\n    const backgroundNode = _iconNode(inactiveIcon);\r\n    const showbgIcon = percent < 100;\r\n    const bgIconContainerStyle = showbgIcon\r\n      ? {}\r\n      : {\r\n          visibility: 'hidden'\r\n        };\r\n    const iconNode = _iconNode(activeIcon);\r\n    const iconContainerStyle = {\r\n      display: 'inline-block',\r\n      position: 'absolute',\r\n      overflow: 'hidden',\r\n      top: 0,\r\n      [direction === 'rtl' ? 'right' : 'left']: 0,\r\n      width: `${percent}%`\r\n    };\r\n    const style = {\r\n      cursor: !readonly ? 'pointer' : 'inherit',\r\n      display: 'inline-block',\r\n      position: 'relative'\r\n    };\r\n\r\n    function handleMouseMove(e) {\r\n      if (onMouseMove) {\r\n        onMouseMove(index, e);\r\n      }\r\n    }\r\n\r\n    function handleMouseClick(e) {\r\n      if (onClick) {\r\n        // [Supporting both TouchEvent and MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent)\r\n        // We must prevent firing click event twice on touch devices.\r\n        e.preventDefault();\r\n        onClick(index, e);\r\n      }\r\n    }\r\n\r\n    function handleTouchEnd(e) {\r\n      if (onTouchEnd) {\r\n        onTouchEnd(index, e);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <span\r\n        style={style}\r\n        onClick={handleMouseClick}\r\n        onMouseMove={handleMouseMove}\r\n        onTouchMove={handleMouseMove}\r\n        onTouchEnd={handleTouchEnd}\r\n      >\r\n        <span style={bgIconContainerStyle}>\r\n          {backgroundNode}\r\n        </span>\r\n        <span style={iconContainerStyle}>\r\n          {iconNode}\r\n        </span>\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\n// Define propTypes only in development. They will be void in production.\r\nRatingSymbol.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\r\n  index: PropTypes.number.isRequired,\r\n  readonly: PropTypes.bool.isRequired,\r\n  inactiveIcon: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.object,\r\n    PropTypes.element\r\n  ]).isRequired,\r\n  activeIcon: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.object,\r\n    PropTypes.element\r\n  ]).isRequired,\r\n  percent: PropTypes.number.isRequired,\r\n  direction: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n  onMouseMove: PropTypes.func,\r\n  onTouchMove: PropTypes.func,\r\n  onTouchEnd: PropTypes.func\r\n};\r\n\r\nexport default RatingSymbol;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Symbol from './RatingSymbol';\r\n\r\nclass Rating extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Indicates the value that is displayed to the user in the form of symbols.\r\n      // It can be either 0 (for no displayed symbols) or (0, end]\r\n      displayValue: this.props.value,\r\n      // Indicates if the user is currently hovering over the rating element\r\n      interacting: false\r\n    };\r\n    this.onMouseLeave = this.onMouseLeave.bind(this);\r\n    this.symbolMouseMove = this.symbolMouseMove.bind(this);\r\n    this.symbolClick = this.symbolClick.bind(this);\r\n    this.symbolEnd = this.symbolEnd.bind(this);\r\n  }\r\n\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const valueChanged = prevState.displayValue !== nextProps.value;\r\n\r\n    if (valueChanged) {\r\n      return {\r\n        displayValue: nextProps.value\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // NOTE: This callback is a little bit fragile. Needs some \"care\" because\r\n  // it relies on brittle state kept with different props and state\r\n  // combinations to try to figure out from where we are coming, I mean, what\r\n  // caused this update.\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // When hover ends, call this.props.onHover with no value.\r\n    if (prevState.interacting && !this.state.interacting) {\r\n      return this.props.onHover();\r\n    }\r\n\r\n    // When hover over.\r\n    // Hover in should only be emitted while we are hovering (interacting),\r\n    // unless we changed the value, usually originated by an onClick event.\r\n    // We do not want to emit a hover in event again on the clicked\r\n    // symbol.\r\n    if (this.state.interacting && prevProps.value == this.props.value) {\r\n      this.props.onHover(this.state.displayValue);\r\n    }\r\n  }\r\n\r\n  symbolEnd(symbolIndex, event) {\r\n    // Do not raise the click event on quiet mode when a touch end is received.\r\n    // On quiet mode the touch end event only notifies that we have left the\r\n    // symbol. We wait for the actual click event to call the symbolClick.\r\n    // On not quiet mode we simulate the click event on touch end and we just\r\n    // prevent the real on click event to be raised.\r\n    // NOTE: I know how we manage click events on touch devices is a little bit\r\n    // weird because we do not notify the starting value that was clicked but\r\n    // the last (touched) value.\r\n    if (!this.props.quiet) {\r\n      this.symbolClick(symbolIndex, event);\r\n      event.preventDefault();\r\n    }\r\n    // On touch end we are \"leaving\" the symbol.\r\n    this.onMouseLeave();\r\n  }\r\n\r\n  symbolClick(symbolIndex, event) {\r\n    const value = this.calculateDisplayValue(symbolIndex, event);\r\n    this.props.onClick(value, event);\r\n  }\r\n\r\n  symbolMouseMove(symbolIndex, event) {\r\n    const value = this.calculateDisplayValue(symbolIndex, event);\r\n    // This call should cause an update only if the state changes.\r\n    // Mainly the first time the mouse enters and whenever the value changes.\r\n    // So DidComponentUpdate is NOT called for every mouse movement.\r\n    this.setState({\r\n      interacting: !this.props.readonly,\r\n      displayValue: value\r\n    });\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.setState({\r\n      displayValue: this.props.value,\r\n      interacting: false\r\n    });\r\n  }\r\n\r\n  calculateDisplayValue(symbolIndex, event) {\r\n    const percentage = this.calculateHoverPercentage(event);\r\n    // Get the closest top fraction.\r\n    const fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions;\r\n    // Truncate decimal trying to avoid float precission issues.\r\n    const precision = 10 ** 3;\r\n    const displayValue =\r\n      symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision);\r\n    // ensure the returned value is greater than 0 and lower than totalSymbols\r\n    return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\r\n  }\r\n\r\n  calculateHoverPercentage(event) {\r\n    const clientX = event.nativeEvent.type.indexOf(\"touch\") > -1\r\n      ? event.nativeEvent.type.indexOf(\"touchend\") > -1\r\n        ? event.changedTouches[0].clientX\r\n        : event.touches[0].clientX\r\n      : event.clientX;\r\n\r\n    const targetRect = event.target.getBoundingClientRect();\r\n    const delta = this.props.direction === 'rtl'\r\n      ? targetRect.right - clientX\r\n      : clientX - targetRect.left;\r\n\r\n    // Returning 0 if the delta is negative solves the flickering issue\r\n    return delta < 0 ? 0 : delta / targetRect.width;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      readonly,\r\n      quiet,\r\n      totalSymbols,\r\n      value,\r\n      placeholderValue,\r\n      direction,\r\n      emptySymbol,\r\n      fullSymbol,\r\n      placeholderSymbol,\r\n      className,\r\n      id,\r\n      style,\r\n      tabIndex\r\n    } = this.props;\r\n    const { displayValue, interacting } = this.state;\r\n    const symbolNodes = [];\r\n    const empty = [].concat(emptySymbol);\r\n    const full = [].concat(fullSymbol);\r\n    const placeholder = [].concat(placeholderSymbol);\r\n    const shouldDisplayPlaceholder =\r\n      placeholderValue !== 0 &&\r\n      value === 0 &&\r\n      !interacting;\r\n\r\n    // The value that will be used as base for calculating how to render the symbols\r\n    let renderedValue;\r\n    if (shouldDisplayPlaceholder) {\r\n      renderedValue = placeholderValue;\r\n    } else {\r\n      renderedValue = quiet ? value : displayValue;\r\n    }\r\n\r\n    // The amount of full symbols\r\n    const fullSymbols = Math.floor(renderedValue);\r\n\r\n    for (let i = 0; i < totalSymbols; i++) {\r\n      let percent;\r\n      // Calculate each symbol's fullness percentage\r\n      if (i - fullSymbols < 0) {\r\n        percent = 100;\r\n      } else if (i - fullSymbols === 0) {\r\n        percent = (renderedValue - i) * 100;\r\n      } else {\r\n        percent = 0;\r\n      }\r\n\r\n      symbolNodes.push(\r\n        <Symbol\r\n          key={i}\r\n          index={i}\r\n          readonly={readonly}\r\n          inactiveIcon={empty[i % empty.length]}\r\n          activeIcon={\r\n            shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length]\r\n          }\r\n          percent={percent}\r\n          direction={direction}\r\n          {...(!readonly && {\r\n            onClick: this.symbolClick,\r\n            onMouseMove: this.symbolMouseMove,\r\n            onTouchMove: this.symbolMouseMove,\r\n            onTouchEnd: this.symbolEnd\r\n          })}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <span\r\n        id={id}\r\n        style={{ ...style, display: 'inline-block', direction }}\r\n        className={className}\r\n        tabIndex={tabIndex}\r\n        aria-label={this.props['aria-label']}\r\n        {...(!readonly && {\r\n          onMouseLeave: this.onMouseLeave\r\n        })}\r\n      >\r\n        {symbolNodes}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\n// Define propTypes only in development.\r\nRating.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\r\n  totalSymbols: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired, // Always >= 0\r\n  placeholderValue: PropTypes.number.isRequired,\r\n  readonly: PropTypes.bool.isRequired,\r\n  quiet: PropTypes.bool.isRequired,\r\n  fractions: PropTypes.number.isRequired,\r\n  direction: PropTypes.string.isRequired,\r\n  emptySymbol: PropTypes.oneOfType([\r\n    // Array of class names and/or style objects.\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\r\n    // Class names.\r\n    PropTypes.string,\r\n    // Style objects.\r\n    PropTypes.object,\r\n    // React element\r\n    PropTypes.element\r\n  ]).isRequired,\r\n  fullSymbol: PropTypes.oneOfType([\r\n    // Array of class names and/or style objects.\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\r\n    // Class names.\r\n    PropTypes.string,\r\n    // Style objects.\r\n    PropTypes.object,\r\n    // React element\r\n    PropTypes.element\r\n  ]).isRequired,\r\n  placeholderSymbol: PropTypes.oneOfType([\r\n    // Array of class names and/or style objects.\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\r\n    // Class names.\r\n    PropTypes.string,\r\n    // Style objects.\r\n    PropTypes.object,\r\n    // React element\r\n    PropTypes.element\r\n  ]),\r\n  onClick: PropTypes.func.isRequired,\r\n  onHover: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Rating;\r\n","function noop() {}\r\nnoop._name = 'react_rating_noop';\r\n\r\nexport default noop;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Style from './utils/style';\r\nimport Rating from './Rating';\r\nimport noop from './utils/noop';\r\n\r\nclass RatingAPILayer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.initialRating\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleHover = this.handleHover.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      value: nextProps.initialRating\r\n    };\r\n  }\r\n\r\n  handleClick(value, e) {\r\n    const newValue = this.translateDisplayValueToValue(value);\r\n    this.props.onClick(newValue);\r\n    // Avoid calling setState if not necessary. Micro optimisation.\r\n    if (this.state.value !== newValue) {\r\n      // If we have a new value trigger onChange callback.\r\n      this.setState({\r\n        value: newValue\r\n      }, () => this.props.onChange(this.state.value));\r\n    }\r\n  }\r\n\r\n  handleHover(displayValue) {\r\n    const value = displayValue === undefined\r\n      ? displayValue\r\n      : this.translateDisplayValueToValue(displayValue);\r\n    this.props.onHover(value);\r\n  }\r\n\r\n  translateDisplayValueToValue(displayValue) {\r\n    const translatedValue = displayValue * this.props.step + this.props.start;\r\n    // minimum value cannot be equal to start, since it's exclusive\r\n    return translatedValue === this.props.start\r\n      ? translatedValue + 1 / this.props.fractions\r\n      : translatedValue;\r\n  }\r\n\r\n  tranlateValueToDisplayValue(value) {\r\n    if (value === undefined) {\r\n      return 0;\r\n    }\r\n    return (value - this.props.start) / this.props.step;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      step,\r\n      emptySymbol,\r\n      fullSymbol,\r\n      placeholderSymbol,\r\n      readonly,\r\n      quiet,\r\n      fractions,\r\n      direction,\r\n      start,\r\n      stop,\r\n      id,\r\n      className,\r\n      style,\r\n      tabIndex\r\n    } = this.props;\r\n\r\n    function calculateTotalSymbols(start, stop, step) {\r\n      return Math.floor((stop - start) / step);\r\n    }\r\n\r\n    return (\r\n      <Rating\r\n        id={id}\r\n        style={style}\r\n        className={className}\r\n        tabIndex={tabIndex}\r\n        aria-label={this.props['aria-label']}\r\n        totalSymbols={calculateTotalSymbols(start, stop, step)}\r\n        value={this.tranlateValueToDisplayValue(this.state.value)}\r\n        placeholderValue={this.tranlateValueToDisplayValue(this.props.placeholderRating)}\r\n        readonly={readonly}\r\n        quiet={quiet}\r\n        fractions={fractions}\r\n        direction={direction}\r\n        emptySymbol={emptySymbol}\r\n        fullSymbol={fullSymbol}\r\n        placeholderSymbol={placeholderSymbol}\r\n        onClick={this.handleClick}\r\n        onHover={this.handleHover}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nRatingAPILayer.defaultProps = {\r\n  start: 0,\r\n  stop: 5,\r\n  step: 1,\r\n  readonly: false,\r\n  quiet: false,\r\n  fractions: 1,\r\n  direction: 'ltr',\r\n  onHover: noop,\r\n  onClick: noop,\r\n  onChange: noop,\r\n  emptySymbol: Style.empty,\r\n  fullSymbol: Style.full,\r\n  placeholderSymbol: Style.placeholder\r\n};\r\n\r\n// Define propTypes only in development.\r\nRatingAPILayer.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\r\n  start: PropTypes.number,\r\n  stop: PropTypes.number,\r\n  step: PropTypes.number,\r\n  initialRating: PropTypes.number,\r\n  placeholderRating: PropTypes.number,\r\n  readonly: PropTypes.bool,\r\n  quiet: PropTypes.bool,\r\n  fractions: PropTypes.number,\r\n  direction: PropTypes.string,\r\n  emptySymbol: PropTypes.oneOfType([\r\n    // Array of class names and/or style objects.\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\r\n    // Class names.\r\n    PropTypes.string,\r\n    // Style objects.\r\n    PropTypes.object,\r\n    // React element\r\n    PropTypes.element\r\n  ]),\r\n  fullSymbol: PropTypes.oneOfType([\r\n    // Array of class names and/or style objects.\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\r\n    // Class names.\r\n    PropTypes.string,\r\n    // Style objects.\r\n    PropTypes.object,\r\n    // React element\r\n    PropTypes.element\r\n  ]),\r\n  placeholderSymbol: PropTypes.oneOfType([\r\n    // Array of class names and/or style objects.\r\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\r\n    // Class names.\r\n    PropTypes.string,\r\n    // Style objects.\r\n    PropTypes.object,\r\n    // React element\r\n    PropTypes.element\r\n  ]),\r\n  onHover: PropTypes.func,\r\n  onClick: PropTypes.func,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default RatingAPILayer;\r\n"],"names":["style","display","borderRadius","border","width","height","empty","backgroundColor","full","placeholder","_iconNode","icon","React","isValidElement","_typeof","Object","prototype","toString","call","className","RatingSymbol","PureComponent","this","props","index","inactiveIcon","activeIcon","percent","direction","readonly","onClick","onMouseMove","onTouchEnd","backgroundNode","bgIconContainerStyle","visibility","iconNode","iconContainerStyle","position","overflow","top","cursor","handleMouseMove","e","preventDefault","onTouchMove","Rating","state","displayValue","_this","value","interacting","onMouseLeave","bind","symbolMouseMove","symbolClick","symbolEnd","prevProps","prevState","onHover","symbolIndex","event","quiet","calculateDisplayValue","setState","percentage","calculateHoverPercentage","fraction","Math","ceil","fractions","precision","floor","totalSymbols","clientX","nativeEvent","type","indexOf","changedTouches","touches","targetRect","target","getBoundingClientRect","delta","right","left","renderedValue","placeholderValue","emptySymbol","fullSymbol","placeholderSymbol","id","tabIndex","symbolNodes","concat","shouldDisplayPlaceholder","fullSymbols","i","push","_Symbol","key","length","nextProps","noop","_name","RatingAPILayer","initialRating","handleClick","handleHover","newValue","translateDisplayValueToValue","_this2","onChange","undefined","translatedValue","step","start","stop","calculateTotalSymbols","tranlateValueToDisplayValue","placeholderRating","defaultProps","Style"],"mappings":"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"}